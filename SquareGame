Square.java=======================================================================================================================
public class Square {

	public static void main(String[] args) {
		
		new SquareGameFrame();

	}

}
SquareGameFrame.java==============================================================================================================
import javax.swing.JButton;
import javax.swing.JFrame;

public class SquareGameFrame extends JFrame {

	SquareGameFrame() {

		this.add(new SquareGamePannel());
		this.setTitle("Square Game");
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setResizable(false);
		this.pack();
		this.setVisible(true);
		this.setLocationRelativeTo(null);
	}
}
SquareGamePannel====================================================================================================================
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.Timer;

public class SquareGamePannel extends JPanel implements ActionListener {
	public static final int ScreenHeight = 600;
	public static final int ScreenWidth = 600;
	public static final int startPlayerXpos = ScreenWidth / 2;
	public static final int startPlayerYpos = ScreenHeight / 2;
	public static int playerXpos = ScreenWidth / 2;
	public static int playerYpos = ScreenHeight / 2;
	public static int enemy1Xpos;
	public static int enemy1Ypos;
	public static int enemy2Xpos;
	public static int enemy2Ypos;
	public static int eneFolRightAndLeftOrUpAndDown;
	public static int eneMoveOrNot;
	public static int point1Xpos;
	public static int point1Ypos;
	public static int specialPoint1Xpos;
	public static int specialPoint1Ypos;
	public static int TimesPoints = 1;
	public static int TimesBoughts = 0;
	public static int UnitSize = 25;
	public static int coinsSize = 20;
	public static boolean isRunning = false;
	public static boolean isPauseing = false;
	public static boolean isChoosingShape = false;
	public static boolean isMainMenu = true;
	public static boolean isShop = false;
	public static boolean button2Disable = false;
	public static boolean button3Disable = false;
	public static boolean button4Disable = false;
	public static boolean button5Disable = false;
	public static boolean button6Disable = false;
	public static boolean button7Disable = false;
	public static int HighScore = 0;
	static final int Delay = 1;
	public static int Score = 0;
	public static int totalScore = 0;
	public static int Deaths = 0;
	public static boolean isCircle = false;
	public static boolean isSquare = true;
	public static boolean changeShapeTool = true;
	public static boolean purchaseErrorTool = true;
	public static int whereEneMoveIfNotFol = 0;
	public static int eneFollowOrNot;
	public static String[] Shapes = { "Circle", "Square" };
	public static int chosenShape;
	Timer timer;
	Random random;
	JButton changePlayerShapeButton = new JButton();
	JButton PlayButton = new JButton();
	JButton mainMenuButton = new JButton();
	JButton shopButton = new JButton();
	JButton Times2Button = new JButton();
	JButton Times3Button = new JButton();
	JButton Times4Button = new JButton();
	JButton Times5Button = new JButton();
	JButton Times6Button = new JButton();
	JButton Times7Button = new JButton();
	JButton backToMenuButton = new JButton();

	public SquareGamePannel() {
		this.setPreferredSize(new Dimension(ScreenWidth, ScreenHeight));
		this.setBackground(Color.cyan);
		this.setFocusable(true);
		this.addKeyListener(new MykeyAdapter());
		random = new Random();
		timer = new Timer(Delay, this);
		timer.start();
		startGame();
	}

	public void startGame() {
		enemysPosGenerate();
		pointsGenerator();
	}

	public void pointsGenerator() {
		point1Xpos = random.nextInt((int) (ScreenWidth / UnitSize)) * UnitSize;
		point1Ypos = random.nextInt((int) (ScreenHeight / UnitSize)) * UnitSize;
		specialPoint1Xpos = random.nextInt((int) (ScreenWidth / UnitSize)) * UnitSize;
		specialPoint1Ypos = random.nextInt((int) (ScreenHeight / UnitSize)) * UnitSize;
	}

	public void enemysPosGenerate() {
		enemy1Xpos = random.nextInt((int) (ScreenWidth / UnitSize)) * UnitSize;
		enemy1Ypos = random.nextInt((int) (ScreenHeight / UnitSize)) * UnitSize;
		enemy2Xpos = random.nextInt((int) (ScreenWidth / UnitSize)) * UnitSize;
		enemy2Ypos = random.nextInt((int) (ScreenHeight / UnitSize)) * UnitSize;
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		drawPlayer(g);
		wait1sec();
	}

	public void wait1sec() {
		if (isRunning) {
			try {
				Thread.sleep(1);
				enemyMovments();
				checkCollideWithCoins();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public void drawPlayer(Graphics g) {
		if (isSquare) {
			isCircle = false;
		} else if (isCircle) {
			isSquare = false;
		}
		if (isRunning && !isPauseing) {
			changePlayerShapeButton.setEnabled(false);
			PlayButton.setEnabled(false);
			this.remove(changePlayerShapeButton);
			this.remove(PlayButton);
			this.remove(mainMenuButton);
			this.remove(shopButton);

			if (isSquare) {
				g.setColor(Color.blue);
				g.fillRect(playerXpos, playerYpos, UnitSize, UnitSize);
			} else if (isCircle) {
				g.setColor(Color.blue);
				g.fillOval(playerXpos, playerYpos, UnitSize, UnitSize);
			}

			g.setColor(new Color(255, 215, 0));
			g.fillOval(point1Xpos + 1, point1Ypos + 2, coinsSize, coinsSize);
			g.setColor(new Color(100,249,25));
			g.fillOval(specialPoint1Xpos + 1, specialPoint1Ypos + 2, coinsSize, coinsSize);

			g.setColor(Color.red);
			g.fillOval(enemy1Xpos, enemy1Ypos, UnitSize, UnitSize);
			g.setColor(Color.red);
			g.fillOval(enemy2Xpos, enemy2Ypos, UnitSize, UnitSize);

			g.setColor(Color.black);
			g.setFont(new Font("Ink Free", Font.BOLD, 30));
			g.drawString("Coins: " + Score, (ScreenWidth / ScreenWidth + 25), 50);
			g.drawString("Deaths: " + Deaths, (ScreenWidth - 170), 50);

		} else if (!isPauseing && !isRunning && isMainMenu) {
			g.setColor(new Color(212, 175, 55));
			g.setFont(new Font("Ink Free", Font.BOLD, 60));
			g.drawString("Square Game", 125, 100);
			g.setFont(new Font("Ink Free", Font.ITALIC, 30));
			g.drawString("By Noam Asher", 200, 150);
			changePlayerShapeButton.setEnabled(true);
			changePlayerShapeButton.setBounds(200, 400, 200, 50);
			changePlayerShapeButton.setFont(new Font("Arial", Font.BOLD, 25));
			changePlayerShapeButton.setText("change shape");
			changePlayerShapeButton.setBackground(Color.black);
			changePlayerShapeButton.setForeground(Color.cyan);
			changePlayerShapeButton.setFocusable(false);
			changePlayerShapeButton.setBorder(BorderFactory.createEtchedBorder());
			changePlayerShapeButton.addActionListener(e -> changeShape());
			PlayButton.setEnabled(true);
			PlayButton.setBounds(200, 300, 200, 50);
			PlayButton.setFont(new Font("Arial", Font.BOLD, 30));
			PlayButton.setText("PLAY");
			PlayButton.setBackground(Color.black);
			PlayButton.setForeground(Color.cyan);
			PlayButton.setFocusable(false);
			PlayButton.setBorder(BorderFactory.createEtchedBorder());
			PlayButton.addActionListener(e -> continueButtonExacuted());
			shopButton.setEnabled(true);
			shopButton.setBounds(200, 500, 200, 50);
			shopButton.setFont(new Font("Arial", Font.BOLD, 30));
			shopButton.setText("Shop");
			shopButton.setBackground(Color.black);
			shopButton.setForeground(Color.cyan);
			shopButton.setFocusable(false);
			shopButton.setBorder(BorderFactory.createEtchedBorder());
			shopButton.addActionListener(e -> shopButtonExacuted());
			g.setColor(Color.black);
			g.setFont(new Font("Arial", Font.ITALIC, 40));
			g.drawString("Total coins: " + totalScore, 175, 200);
			// Add HighScore here
			this.add(PlayButton);
			this.add(changePlayerShapeButton);
			this.add(shopButton);
		} else if (isPauseing && !isRunning) {
			this.remove(changePlayerShapeButton);
			g.setColor(Color.yellow);
			g.setFont(new Font("Ink Free", Font.BOLD, 60));
			g.drawString("Coins: " + Score, (ScreenWidth / 2 - 110), ScreenHeight / 2 - 50);
			PlayButton.setEnabled(true);
			g.setColor(Color.black);
			g.setFont(new Font("Ink Free", Font.BOLD, 60));
			g.drawString("HighScore: " + HighScore, (ScreenWidth / 2 - 175), ScreenHeight / 2 - 150);
			PlayButton.setBounds(200, 300, 200, 50);
			PlayButton.setFont(new Font("Arial", Font.ITALIC, 40));
			PlayButton.setText("PLAY");
			PlayButton.setBackground(Color.black);
			PlayButton.setForeground(Color.cyan);
			PlayButton.setFocusable(false);
			PlayButton.setBorder(BorderFactory.createEtchedBorder());
			PlayButton.addActionListener(e -> continueButtonExacuted());
			this.add(PlayButton);
			mainMenuButton.setEnabled(true);
			mainMenuButton.setBounds(200, 400, 200, 50);
			mainMenuButton.setFont(new Font("Arial", Font.ITALIC, 40));
			mainMenuButton.setText("Main Menu");
			mainMenuButton.setBackground(Color.black);
			mainMenuButton.setForeground(Color.cyan);
			mainMenuButton.setFocusable(false);
			mainMenuButton.setBorder(BorderFactory.createEtchedBorder());
			mainMenuButton.addActionListener(e -> mainMenuButtonExacuted());
			this.add(mainMenuButton);
		} else if (isShop) {
			purchaseErrorTool = true;

			Times2Button.setEnabled(true);
			Times2Button.setBounds(100, 50, 100, 100);
			Times2Button.setFont(new Font("Arial", Font.BOLD, 20));
			Times2Button.setText("<html>X2<br />coins</html>");
			Times2Button.setBackground(Color.blue);
			Times2Button.setForeground(Color.cyan);
			Times2Button.setFocusable(false);
			Times2Button.setBorder(BorderFactory.createEtchedBorder());
			Times2Button.addActionListener(e -> checkTimes2());
			this.add(Times2Button);
			if (!button2Disable) {
				g.setColor(Color.black);
				g.setFont(new Font("Ink Free", Font.BOLD, 20));
				g.drawString("25 coins", 105, 175);
			} else {
				g.setColor(Color.red);
				g.setFont(new Font("Ink Free", Font.BOLD, 30));
				g.drawString("Bought!", 100, 175);
			}

			Times3Button.setEnabled(true);
			Times3Button.setBounds(100, 207, 100, 100);
			Times3Button.setFont(new Font("Arial", Font.BOLD, 20));
			Times3Button.setText("<html>X3<br />coins</html>");
			Times3Button.setBackground(Color.blue);
			Times3Button.setForeground(Color.cyan);
			Times3Button.setFocusable(false);
			Times3Button.setBorder(BorderFactory.createEtchedBorder());
			Times3Button.addActionListener(e -> checkTimes3());
			this.add(Times3Button);
			if (!button3Disable) {
				g.setColor(Color.black);
				g.setFont(new Font("Ink Free", Font.BOLD, 20));
				g.drawString("70 coins", 105, 337);
			} else {
				g.setColor(Color.red);
				g.setFont(new Font("Ink Free", Font.BOLD, 30));
				g.drawString("Bought!", 100, 337);
			}

			Times4Button.setEnabled(true);
			Times4Button.setBounds(100, 375, 100, 100);
			Times4Button.setFont(new Font("Arial", Font.BOLD, 20));
			Times4Button.setText("<html>X4<br />coins</html>");
			Times4Button.setBackground(Color.blue);
			Times4Button.setForeground(Color.cyan);
			Times4Button.setFocusable(false);
			Times4Button.setBorder(BorderFactory.createEtchedBorder());
			Times4Button.addActionListener(e -> checkTimes4());
			this.add(Times4Button);
			if (!button4Disable) {
				g.setColor(Color.black);
				g.setFont(new Font("Ink Free", Font.BOLD, 20));
				g.drawString("150 coins", 105, 500);
			} else {
				g.setColor(Color.red);
				g.setFont(new Font("Ink Free", Font.BOLD, 30));
				g.drawString("Bought!", 100, 500);
			}

			Times5Button.setEnabled(true);
			Times5Button.setBounds(400, 50, 100, 100);
			Times5Button.setFont(new Font("Arial", Font.BOLD, 20));
			Times5Button.setText("<html>X5<br />coins</html>");
			Times5Button.setBackground(Color.blue);
			Times5Button.setForeground(Color.cyan);
			Times5Button.setFocusable(false);
			Times5Button.setBorder(BorderFactory.createEtchedBorder());
			Times5Button.addActionListener(e -> checkTimes5());
			this.add(Times5Button);
			if (!button5Disable) {
				g.setColor(Color.black);
				g.setFont(new Font("Ink Free", Font.BOLD, 20));
				g.drawString("270 coins", 405, 175);
			} else {
				g.setColor(Color.red);
				g.setFont(new Font("Ink Free", Font.BOLD, 30));
				g.drawString("Bought!", 405, 175);
			}

			Times6Button.setEnabled(true);
			Times6Button.setBounds(400, 207, 100, 100);
			Times6Button.setFont(new Font("Arial", Font.BOLD, 20));
			Times6Button.setText("<html>X6<br />coins</html>");
			Times6Button.setBackground(Color.blue);
			Times6Button.setForeground(Color.cyan);
			Times6Button.setFocusable(false);
			Times6Button.setBorder(BorderFactory.createEtchedBorder());
			Times6Button.addActionListener(e -> checkTimes6());
			this.add(Times6Button);
			if (!button6Disable) {
				g.setColor(Color.black);
				g.setFont(new Font("Ink Free", Font.BOLD, 20));
				g.drawString("400 coins", 405, 337);
			} else {
				g.setColor(Color.red);
				g.setFont(new Font("Ink Free", Font.BOLD, 30));
				g.drawString("Bought!", 405, 337);
			}

			Times7Button.setEnabled(true);
			Times7Button.setBounds(400, 375, 100, 100);
			Times7Button.setFont(new Font("Arial", Font.BOLD, 20));
			Times7Button.setText("<html>X7<br />coins</html>");
			Times7Button.setBackground(Color.blue);
			Times7Button.setForeground(Color.cyan);
			Times7Button.setFocusable(false);
			Times7Button.setBorder(BorderFactory.createEtchedBorder());
			Times7Button.addActionListener(e -> checkTimes7());
			this.add(Times7Button);
			if (!button7Disable) {
				g.setColor(Color.black);
				g.setFont(new Font("Ink Free", Font.BOLD, 20));
				g.drawString("600 coins", 405, 500);
			} else {
				g.setColor(Color.red);
				g.setFont(new Font("Ink Free", Font.BOLD, 30));
				g.drawString("Bought!", 405, 500);
			}

			backToMenuButton.setEnabled(true);
			backToMenuButton.setBounds(250, 500, 100, 50);
			backToMenuButton.setFont(new Font("Arial", Font.BOLD, 20));
			backToMenuButton.setText("BACK");
			backToMenuButton.setBackground(Color.black);
			backToMenuButton.setForeground(Color.blue);
			backToMenuButton.setFocusable(false);
			backToMenuButton.setBorder(BorderFactory.createEtchedBorder());
			backToMenuButton.addActionListener(e -> backToMenuButton());
			this.add(backToMenuButton);
		}
	}

	public void backToMenuButton() {
		isShop = false;
		isMainMenu = true;
		this.remove(Times2Button);
		this.remove(Times3Button);
		this.remove(Times4Button);
		this.remove(Times5Button);
		this.remove(Times6Button);
		this.remove(Times7Button);
		this.remove(backToMenuButton);
	}

	public void checkTimes2() {
		if (TimesBoughts == 0 && totalScore >= 25) {
			totalScore -= 25;
			button2Disable = true;
			Bought();
		} else if (!button2Disable && !isMainMenu && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You dont have enough coins\nto purchase that item", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		}
	}

	public void checkTimes3() {
		if (TimesBoughts == 1 && totalScore >= 70) {
			totalScore -= 70;
			button3Disable = true;
			Bought();
			Times3Button.setEnabled(false);
		} else if (!button3Disable && !isMainMenu && totalScore < 70 && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You dont have enough coins\nto purchase that item", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		} else if (!button3Disable && TimesBoughts != 1 && !isMainMenu && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You need to buy the\nprevious items", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		}
	}

	public void checkTimes4() {
		if (TimesBoughts == 2 && totalScore >= 150) {
			totalScore -= 150;
			button4Disable = true;
			Bought();
			Times4Button.setEnabled(false);
		} else if (!button4Disable && !isMainMenu && totalScore < 150 && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You dont have enough coins\nto purchase that item", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		} else if (!button4Disable && TimesBoughts != 2 && !isMainMenu && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You need to buy the\nprevious items", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		}
	}

	public void checkTimes5() {
		if (TimesBoughts == 3 && totalScore >= 270) {
			totalScore -= 270;
			button5Disable = true;
			Bought();
			Times5Button.setEnabled(false);
		} else if (!button5Disable && !isMainMenu && totalScore < 270 && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You dont have enough coins\nto purchase that item", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		} else if (!button5Disable && TimesBoughts != 3 && !isMainMenu && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You need to buy the\nprevious items", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		}
	}

	public void checkTimes6() {
		if (TimesBoughts == 4 && totalScore >= 400) {
			totalScore -= 400;
			button6Disable = true;
			Bought();
			Times6Button.setEnabled(false);
		} else if (!button6Disable && !isMainMenu && totalScore < 400 && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You dont have enough coins\nto purchase that item", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		} else if (!button3Disable && TimesBoughts != 4 && !isMainMenu && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You need to buy the\nprevious items", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		}
	}

	public void checkTimes7() {
		if (TimesBoughts == 5 && totalScore >= 600) {
			totalScore -= 600;
			button7Disable = true;
			Bought();
			Times7Button.setEnabled(false);
		} else if (!button7Disable && !isMainMenu && totalScore < 600 && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You dont have enough coins\nto purchase that item", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		} else if (!button7Disable && TimesBoughts != 5 && !isMainMenu && purchaseErrorTool) {
			JOptionPane.showMessageDialog(null, "You need to buy the\nprevious items", "ERROR!!!",
					JOptionPane.ERROR_MESSAGE);
			purchaseErrorTool = false;
		}
	}

	public void Bought() {
		TimesPoints++;
		TimesBoughts++;
		JOptionPane.showMessageDialog(null, "Congrats on your purchase!", "PURCHASE SUCCEED!",
				JOptionPane.PLAIN_MESSAGE);
	}

	public void mainMenuButtonExacuted() {
		isMainMenu = true;
		totalScore += Score;
		Score = 0;
		playerXpos = startPlayerXpos;
		playerYpos = startPlayerYpos;
		isPauseing = false;
		isRunning = false;
		this.remove(mainMenuButton);
	}

	public void continueButtonExacuted() {
		isMainMenu = false;
		isRunning = true;
		isPauseing = false;
		isShop = false;
		changeShapeTool = true;
	}

	public void shopButtonExacuted() {
		isShop = true;
		isPauseing = false;
		isRunning = false;
		isMainMenu = false;
		this.remove(shopButton);
		this.remove(changePlayerShapeButton);
		this.remove(PlayButton);
	}

	public void changeShape() {
		this.remove(shopButton);
		isChoosingShape = true;
		if (isChoosingShape && !isPauseing && changeShapeTool) {
			chosenShape = JOptionPane.showOptionDialog(null, "Please choose what shape\nYou would like to play.",
					"Change Shape", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, Shapes, Shapes[1]);
			switch (chosenShape) {
			case 0:
				isCircle = true;
				isSquare = false;
				break;
			case 1:
				isSquare = true;
				isCircle = false;
				break;
			}
			isChoosingShape = false;
			isPauseing = false;
			isMainMenu = true;
			isShop = false;
			changeShapeTool = false;
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (isRunning) {
			checkCollisions();
		}
		repaint();

	}

	public void checkCollisions() {
		checkCollideWithCoins();
		if (isRunning && !isPauseing) {
			// check collide with left border
			if (playerXpos < 0) {
				playerXpos = ScreenWidth - 25;
				checkCollideWithCoins();
			}
			// check collide with right border
			else if (playerXpos >= ScreenWidth) {
				playerXpos = 0;
				checkCollideWithCoins();
			}
			// check collide with top border
			else if (playerYpos < 0) {
				playerYpos = ScreenHeight - 25;
				checkCollideWithCoins();
			}
			// check collide with bottom border
			else if (playerYpos >= ScreenHeight) {
				playerYpos = 0;
				checkCollideWithCoins();
			}
			// check collide with enemy
			if (playerXpos == enemy1Xpos && playerYpos == enemy1Ypos) {
				playerXpos = startPlayerXpos;
				playerYpos = startPlayerYpos;
				if (Score > HighScore) {
					HighScore = Score;
				}
				totalScore += Score;
				Score = 0;
				Deaths++;
				enemysPosGenerate();
			}
			else if(playerXpos == enemy2Xpos && playerYpos == enemy2Ypos) {
				playerXpos = startPlayerXpos;
				playerYpos = startPlayerYpos;
				if (Score > HighScore) {
					HighScore = Score;
				}
				totalScore += Score;
				Score = 0;
				Deaths++;
				enemysPosGenerate();
			}
			// check collide with points
			checkCollideWithCoins();
		}
	}

	public void checkCollideWithCoins() {
		if (playerXpos == point1Xpos && playerYpos == point1Ypos) {
			Score += 1 * TimesPoints;
			pointsGenerator();
		}
		else if (playerXpos == specialPoint1Xpos && playerYpos == specialPoint1Ypos) {
			Score += 2 * TimesPoints;
			pointsGenerator();
		}
	}

	public void removeShopButon() {
		this.remove(shopButton);
	}

	public void enemyMovments() {
		//enemy 1 V
		eneMoveOrNot = random.nextInt(4);// if he will move else he wont |-75% of speed 1/4|
		if (eneMoveOrNot == 0) {
			if (isRunning && !isPauseing) {
				eneFollowOrNot = random.nextInt(3);// follow or not
				if (eneFollowOrNot == 0) {
					eneFolRightAndLeftOrUpAndDown = random.nextInt(2);// 0 = Right And Left 1 = Up And Down
					if (eneFolRightAndLeftOrUpAndDown == 0) {
						if (enemy1Xpos > playerXpos) {
							enemy1Xpos -= 25;
							checkCollisions();
						} else {
							enemy1Xpos += 25;
							checkCollisions();
						}
					} else {
						if (enemy1Ypos > playerYpos) {
							enemy1Ypos -= 25;
							checkCollisions();
						} else {
							enemy1Ypos += 25;
							checkCollisions();
						}
					}
				} else {
					whereEneMoveIfNotFol = random.nextInt(4);
					switch (whereEneMoveIfNotFol) {
					case 0:
						if (enemy1Xpos != 600) {
							enemy1Xpos += 25;
							checkCollisions();
						}
						break;
					case 1:
						if (enemy1Ypos != 600) {
							enemy1Ypos += 25;
							checkCollisions();
						}
						break;
					case 2:
						if (enemy1Xpos != 0) {
							enemy1Xpos -= 25;
							checkCollisions();
						}
						break;
					case 3:
						if (enemy1Ypos != 0) {
							enemy1Ypos -= 25;
							checkCollisions();
						}
						break;
					}
				}
			}
		}
		//enemy 2 V
		eneMoveOrNot = random.nextInt(4);// if he will move else he wont |-75% of speed 1/4|
		if (eneMoveOrNot == 0) {
			if (isRunning && !isPauseing) {
				eneFollowOrNot = random.nextInt(3);// follow or not
				if (eneFollowOrNot == 0) {
					eneFolRightAndLeftOrUpAndDown = random.nextInt(2);// 0 = Right And Left 1 = Up And Down
					if (eneFolRightAndLeftOrUpAndDown == 0) {
						if (enemy2Xpos > playerXpos) {
							enemy2Xpos -= 25;
							checkCollisions();
						} else {
							enemy2Xpos += 25;
							checkCollisions();
						}
					} else {
						if (enemy2Ypos > playerYpos) {
							enemy2Ypos -= 25;
							checkCollisions();
						} else {
							enemy2Ypos += 25;
							checkCollisions();
						}
					}
				} else {
					whereEneMoveIfNotFol = random.nextInt(4);
					switch (whereEneMoveIfNotFol) {
					case 0:
						if (enemy2Xpos != 600) {
							enemy2Xpos += 25;
							checkCollisions();
						}
						break;
					case 1:
						if (enemy2Ypos != 600) {
							enemy2Ypos += 25;
							checkCollisions();
						}
						break;
					case 2:
						if (enemy2Xpos != 0) {
							enemy2Xpos -= 25;
							checkCollisions();
						}
						break;
					case 3:
						if (enemy2Ypos != 0) {
							enemy2Ypos -= 25;
							checkCollisions();
						}
						break;
					}
				}
			}
		}
	}

	public class MykeyAdapter extends KeyAdapter {
		@Override
		public void keyPressed(KeyEvent e) {
			super.keyPressed(e);
			if (isRunning) {
				switch (e.getKeyCode()) {
				case KeyEvent.VK_LEFT:
					playerXpos -= 25;
					break;
				case KeyEvent.VK_RIGHT:
					playerXpos += 25;
					break;
				case KeyEvent.VK_DOWN:
					playerYpos += 25;
					break;
				case KeyEvent.VK_UP:
					playerYpos -= 25;
					break;
				case KeyEvent.VK_C:
					System.out.println("Player x = " + playerXpos);
					System.out.println("Player y = " + playerYpos);
					System.out.println("Enemy(1) x = " + enemy1Xpos);
					System.out.println("Enemy(1) y = " + enemy1Ypos);
					System.out.println("Enemy(2) x = " + enemy2Xpos);
					System.out.println("Enemy(2) y = " + enemy2Ypos);
					System.out.println("Coin x = " + point1Xpos);
					System.out.println("Coin y = " + point1Ypos);
					break;
				}
			}
			switch (e.getKeyCode()) {
			case KeyEvent.VK_ESCAPE:
				if (isPauseing) {
					isRunning = true;
					isPauseing = false;
				} else if (!isPauseing && !isMainMenu && !isShop) {
					isRunning = false;
					isPauseing = true;
				}
				break;
			}
		}
	}
}
